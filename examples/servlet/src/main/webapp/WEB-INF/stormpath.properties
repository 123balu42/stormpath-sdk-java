# =====================================================================
#                  Stormpath Client Configuration
# =====================================================================
#
# If you have only one application in Stormpath, and your app runs on a single JVM, this configuration file
# is entirely optional.
#
# However, if you have more than one application, or your app runs on more than one JVM (clustered/distributed),
# you may need to specify some config changes.  Please see the sections below.



# =========== Application HREF ======================
#
# If you have more than one application in Stormpath, you must specify which registered application to reference
# in this webapp by uncommenting the following line and specifying the app's Stormpath HREF:
#
# stormpath.application.href = YOUR_APPLICATION_HREF_HERE
#
# If you have only one application, it will be auto-discovered when you use an instance of the
# com.stormpath.sdk.servlet.application.DefaultApplicationResolver, for example, in Java code:
#
# Application myStormpathApplication = new DefaultApplicationResolver().getApplication(request.getServletContext());



# =========== API Key ======================
#
# By default, your API Key file will be auto-discovered and used based on the logic
# documented in the com.stormpath.sdk.api.ApiKeyBuilder#build() JavaDoc.
#
# If you preferred otherwise, you could manually specify a location here instead:
# stormpath.apiKey.file = LOCATION
#
# LOCATION can be a fully qualified file path, a classpath location like classpath:/stormpath.properties or a
# URL like url:http://myhost:port/path/to/stormpath.properties (notice the classpath: and url: prefixes).
#
# Or, instead of pointing to a file, you could manually specify values here, for example:
#
# stormpath.apiKey.id = YOUR_API_KEY_ID_HERE
#
# It is strongly recommended however that you NOT embed API Key secrets in project text files like this one.  You might
# want to specify the following property instead via a JVM system property at application startup, for example:
#
# -Dstormpath.apiKey.secret=YOUR_API_KEY_SECRET



# =========== Caching ======================
#
# THIS PROPERTY-BASED CACHE CONFIG IS ONLY SAFE FOR WEB APPS THAT RUN ON A SINGLE JVM!
#
# If your webapp runs on multiple JVMs (because it is a clustered or distributed webapp), you should configure the
# Stormpath Client with a cluster-safe coherent CacheManager instance (for example, using Hazelcast) instead of this
# single-JVM-cache-manager config.
#
# That said, if your app runs on a single JVM, the following config options can be helpful:
#
# Time-To-Live default for all cache regions (millis).  3,600,000 millis = 1 hour
# stormpath.cache.ttl = 3600000
#
# Time-To-Idle default for all cache regions (millis):
# stormpath.cache.tti = 3600000
#
# You can configure a specific cache region's ttl and tti by prefixing the region name with 'stormpath.cache.' and
# suffixing it with '.ttl' or '.tti' for TTL or TTI respectively.  For example, a tti of 5 min (300000 ms) and a
# ttl of 1 hour (3600000 ms):
#
# stormpath.cache.This Is My Cache Region Name.tti = 300000
# stormpath.cache.This Is My Cache Region Name.ttl = 3600000
#
# The Stormpath Client creates a cache region per data type: all cached Account objects are in one region, all cached
# Group objects in another, etc.  The region names are equal to the _interface_ name of each type.  For example:
#
# com.stormpath.sdk.account.Account
# com.stormpath.sdk.group.Group
#
# Therefore, when adding the necessary property prefix and suffix, you might have the following config lines:
#
# stormpath.cache.com.stormpath.sdk.account.Account.tti = 3600000
# stormpath.cache.com.stormpath.sdk.group.Group.ttl = 4800000
#
# etc.



# =========== HTTP Proxy Config ============
# If your app requires HTTP communication to Stormpath to go through an HTTP Proxy:
#
# stormpath.proxy.host = foo
# stormpath.proxy.port = 8888
# stormpath.proxy.username = jsmith
#
# It is strongly recommended that you don't embed passwords in text files.  You might want to specify the
# following property instead via a JVM system property, for example: -Dstormpath.proxy.password=aPassword
#
# stormpath.proxy.password = aPassword



# =========== Authentication Scheme ========
# If you're on Google App Engine, you might require this:
# stormpath.authentication.scheme = basic
