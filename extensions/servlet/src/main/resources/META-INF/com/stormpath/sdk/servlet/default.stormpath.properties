#
# Copyright 2014 Stormpath, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

stormpath.cache.manager = com.stormpath.sdk.servlet.cache.config.DefaultCacheManagerFactory

# The context-relative path to the login view:
stormpath.web.login.url = /login

# The default context-relative path where the user will be redirected after logging in:
stormpath.web.login.nextUrl = /

# The context-relative path that will log out the user if visited:
stormpath.web.logout.url = /logout

# The default context-relative path where the user will be redirected after logging out:
stormpath.web.logout.nextUrl = /

# The context-relative path to the register ('new user') view:
stormpath.web.register.url = /register

# The default context-relative path where the user will be redirected after registering:
stormpath.web.register.nextUrl = /

# The context-relative path the user will visit when clicking a link in a verification email after registration
# This page will likely always be accessed with a ?sptoken=SP_TOKEN_VALUE query parameter
stormpath.web.verify.url = /verify

# The default context-relative path where the user will be redirected after successfully verifying their email address
# Note: it is *not safe* (insecure) to automatically login a user when they click an email link.
stormpath.web.verify.nextUrl = /login?status=verified

# The context-relative path where an authenticated (already logged in) user will be redirected when attempting to
# access a url they are not allowed to access.
stormpath.web.unauthorized.url = /unauthorized

# The context-relative path an HTTP client may POST to obtain an access token.  The access token can be used by the
# client to authenticate subsequent HTTP requests:
stormpath.web.accessToken.url = /oauth/token

# Registration form fields displayed when a browser visits the register page.  Property values can be one of the
# following:
#
# disabled: the field will NOT exist in the form
# optional: the field will be shown but the user does not need to populate it
# required: the field will be shown and the user must populate it with a valid value
#
# Tip: re-ordering the property declarations below will automatically re-order the fields in the view.
#
stormpath.web.register.form.fields.givenName  = optional
stormpath.web.register.form.fields.middleName = disabled
stormpath.web.register.form.fields.surname    = optional
stormpath.web.register.form.fields.username   = disabled
stormpath.web.register.form.fields.email      = required
stormpath.web.register.form.fields.password   = required

# The storage locations that should be used to save account state after successful authentication.
#
# The value is a comma-delimited list of one or more of cookie, session, or disabled:
#
# cookie:   Store the account state in a cookie.  The cookie's settings are controlled by the
#           stormpath.web.account.cookie.* properties below.  The same cookie is read later when the
#           stormpath.servlet.filter.accountResolver.resolvers property contains a 'cookie' value (without the quotes).
#
# session:  Store the account state in the servlet HTTP session.  This option will create a new HTTP session if one
#           does not yet exist.
#
# disabled: Do not store the account state during a request.  This is a good option if your server-side app
#           authenticates every request (for example, a REST API).
#
stormpath.web.account.saver.locations = cookie

stormpath.web.account.cookie.name = account
stormpath.web.account.cookie.comment = ${servletContext.sessionCookieConfig.comment}
stormpath.web.account.cookie.domain = ${servletContext.sessionCookieConfig.domain}
stormpath.web.account.cookie.maxAge = ${servletContext.sessionCookieConfig.maxAge}
stormpath.web.account.cookie.path = ${servletContext.sessionCookieConfig.comment}
# It is strongly recommended to set httpOnly to true to prevent browser JavaScript inspection of identity cookies:
stormpath.web.account.cookie.httpOnly = true
# THE FOLLOWING 'SECURE' SETTING SHOULD *ALWAYS* BE TRUE IN PRODUCTION, EVEN IN INTRANET/PRIVATE COMPANY APPS.
# A 'false' value *will* make your application vulnerable to identity hijacking attacks.
# It is _strongly_ recommended to only set it to false during testing, or better yet, configure the
# stormpath.web.account.cookie.secure.evaluator property (next) to be a custom implementation class that can
# dynamically turn on or off the secure flag based on a configurable setting:
stormpath.web.account.cookie.secure = true
stormpath.web.account.cookie.secure.evaluator = com.stormpath.sdk.servlet.filter.account.LocalhostAccountCookieSecureEvaluator

stormpath.web.account.session.attribute.names = com.stormpath.sdk.account.Account, account

stormpath.web.account.jwt.factory = com.stormpath.sdk.servlet.filter.account.config.AuthenticationJwtFactoryFactory
stormpath.web.account.jwt.resolver = com.stormpath.sdk.servlet.filter.account.config.JwtAccountResolverFactory

# The account cookie is really just a wrapper for a JSON Web Token (JWT).  This next property defines how long the JWT
# itself (the cookie value, not the cookie) is usable before it must be discarded.  This value must always be positive
# (greater than zero) and, if stormpath.web.account.cookie.maxAge is greater than zero, it must be greater than or equal
# to the maxAge value as well.  The default value is your web app's session cookie max age if the max age is greater
# than zero. If your web app's session cookie max age is less than 1, the default is 259200 seconds (3 days).
#
# You only need to modify this value if 1) you do not configure your web app's session cookie max age AND 2) you want
# your users to be 'remembered' longer than 3 days.
stormpath.web.account.jwt.ttl = ${servletContext.sessionCookieConfig.maxAge > 0 ? servletContext.sessionCookieConfig.maxAge : 259200}


stormpath.web.account.jwt.signingKey.resolver = com.stormpath.sdk.servlet.filter.account.DefaultJwtSigningKeyResolver

# =========== Servlet Request Behavior ========
#
# The next property controls the output of httpServletRequest.getRemoteUser() if the user is authenticated.
#
# The value can be one of: email, username, givenName, href or bypass:
#
# email:     getRemoteUser() will return account.getEmail();
# username:  returns account.getUsername();
# givenName: returns account.getGivenName();
# href:      returns account.getHref();
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
stormpath.servlet.request.remoteUser.strategy = username

# The next property controls the output of httpServletRequest.getUserPrincipal() if the user is authenticated.
#
# The value can be one of: account, email, username, givenName, href or bypass:
#
# account:   returns a com.stormpath.sdk.servlet.http.AccountPrincipal that represents the entire Account object
# email:     returns a com.stormpath.sdk.servlet.http.EmailPrincipal matching account.getEmail()
# username:  returns a com.stormpath.sdk.servlet.http.UsernamePrincipal matching account.getUsername()
# givenName: returns a com.stormpath.sdk.servlet.http.GivenNamePrincipal matching account.getGivenName()
# href:      returns a com.stormpath.sdk.servlet.http.HrefPrincipal matching account.getHref()
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
stormpath.servlet.request.userPrincipal.strategy = account

stormpath.servlet.request.factory = com.stormpath.sdk.servlet.filter.config.StormpathServletRequestFactoryFactory

# =========== Default Servlet Filter Configuration ==========
#

# The AccountResolverFilter determines which user account may be associated with an incoming request and then makes
# that account available for the duration of the request.  It does this by delegating lookup behavior to one or more
# configured Account Resolver implementations.  These implementations are defined by the following property convention:
#
# stormpath.servlet.filter.accountResolver.resolvers.RESOLVER_NAME = RESOLVER_IMPLEMENTATION_FULLY_QUALIFIED_CLASS_NAME
#
# Where:
#   * RESOLVER_NAME is a simple name/alias to give to the resolver, for example, 'cookie' or 'header'
#   * RESOLVER_IMPLEMENTATION_FULLY_QUALIFIED_CLASS_NAME is the fully qualified class name of an implementation
#     implements the com.stormpath.sdk.servlet.http.Resolver interface (and returns com.stormpath.sdk.account.Account
#     instances).
#
# This convention defines the 'pool' of all available account resolvers.  The ones actually used in your application are
# defined by specifying a comma-delimited list of resolver names via the
# stormpath.servlet.filter.accountResolver.resolvers property as described next.
#
# Resolver Order
#
# When a Resolver returns an Account instance, all remaining Resolvers are ignored.  Resolvers are invoked in the order
# that they are specified in the following comma-delimited list.  Be sure to specify resolver names in the
# order that you prefer request locations to be checked:
stormpath.servlet.filter.accountResolver.resolvers = header, cookie, session

# Authorization Header Account Resolver: inspects the HTTP 'Authorization' header using all
# available HTTP Authentication Schemes. Available schemes are defined by the following property name/value convention:
#
# stormpath.servlet.http.authc.schemes.SCHEME_NAME = SCHEME_IMPLEMENTATION_FULLY_QUALIFIED_CLASS_NAME
#
# See the default stormpath.servlet.http.authc.schemes.* properties below for examples.
stormpath.servlet.filter.accountResolver.resolvers.header = com.stormpath.sdk.servlet.filter.account.config.AuthorizationHeaderAccountResolverFactory

# Cookie Account Resolver: looks for a secure digitally signed cookie that contains the account's information.  The
# cookie itself is created and set by the stormpath.servlet.filter.authc.saver.cookie implementation.
stormpath.servlet.filter.accountResolver.resolvers.cookie = com.stormpath.sdk.servlet.filter.account.config.CookieAccountResolverFactory

# Session Account Resolver: looks in an available HTTP session for the account.  This implementation does not create
# sessions - it will only look in the request's session if the session already exists.
stormpath.servlet.filter.accountResolver.resolvers.session = com.stormpath.sdk.servlet.filter.account.SessionAccountResolver

# Must *ALWAYS* be true in production (OAuth spec requirement), but can be set to 'false' during localhost development:
stormpath.servlet.filter.accessToken.secure = true
stormpath.servlet.filter.accessToken.requestAuthorizer = com.stormpath.sdk.servlet.filter.oauth.OriginAccessTokenRequestAuthorizer
stormpath.servlet.filter.accessToken.authenticationRequestFactory = com.stormpath.sdk.servlet.filter.oauth.config.AccessTokenAuthenticationRequestFactoryFactory
stormpath.servlet.filter.accessToken.resultFactory = com.stormpath.sdk.servlet.filter.oauth.config.AccessTokenResultFactoryFactory

stormpath.servlet.filter.authc.saver = com.stormpath.sdk.servlet.filter.account.config.AuthenticationResultSaverFactory
stormpath.servlet.filter.authc.saver.savers = cookie
stormpath.servlet.filter.authc.saver.savers.cookie = com.stormpath.sdk.servlet.filter.account.config.CookieAuthenticationResultSaverFactory
stormpath.servlet.filter.authc.saver.savers.session = com.stormpath.sdk.servlet.filter.account.config.SessionAuthenticationResultSaverFactory
stormpath.servlet.filter.authc.unauthenticatedHandler = com.stormpath.sdk.servlet.filter.config.UnauthenticatedHandlerFactory
stormpath.servlet.filter.authc.usernamePasswordRequestFactory = com.stormpath.sdk.servlet.filter.config.UsernamePasswordRequestFactoryFactory

stormpath.servlet.http.authc = com.stormpath.sdk.servlet.http.authc.config.HttpAuthenticatorFactory
# If you set the following value to false and the request must be authenticated, you *must* specify the
# 'authc' filter for the relevant path to enforce authentication.
stormpath.servlet.http.authc.challenge = true
stormpath.servlet.http.authc.schemes = basic, bearer
stormpath.servlet.http.authc.schemes.basic = com.stormpath.sdk.servlet.http.authc.config.BasicAuthenticationSchemeFactory
stormpath.servlet.http.authc.schemes.bearer = com.stormpath.sdk.servlet.http.authc.config.BearerAuthenticationSchemeFactory
stormpath.servlet.http.authc.accountStoreResolver = com.stormpath.sdk.servlet.http.authc.DisabledAuthenticationAccountStoreResolver

stormpath.servlet.filter.authz.unauthorizedHandler = com.stormpath.sdk.servlet.filter.config.UnauthorizedHandlerFactory

stormpath.servlet.filter.chain.resolver = com.stormpath.sdk.servlet.config.DefaultFilterChainResolverFactory
stormpath.servlet.request.client.attributeNames = client
stormpath.servlet.request.application.attributeNames = application

