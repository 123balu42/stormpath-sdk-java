#
# Copyright 2014 Stormpath, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# The context-relative path to the login view:
stormpath.web.login.url = /login

# The context-relative path where the user will be redirected after logging in if a 'next' request parameter is missing
stormpath.web.login.nextUrl = /

# The context-relative path that will log out the user if visited:
stormpath.web.logout.url = /logout

# The context-relative path where the user will be redirected after logging out if a 'next' request parameter is missing
stormpath.web.logout.nextUrl = /

# The context-relative path to the register ('new user') view:
stormpath.web.register.url = /register

# The context-relative path where the user will be redirected after registering if a 'next' request parameter is missing
stormpath.web.register.nextUrl = /

# The context-relative path the user will visit when clicking a link in a verification email after registration
# This page will likely always be accessed with a ?sptoken=SP_TOKEN_VALUE query
stormpath.web.verify.url = /verify

# The context-relative path where the user will be redirected after successfully verifying their email address
# Note: it is *not safe* (insecure) to automatically login a user when they click an email link.
stormpath.web.verify.nextUrl = /login?status=verified

# The context-relative path where an authenticated (already logged in) user will be redirected when attempting to
#access a url they are not allowed to access.
stormpath.web.unauthorized.url = /unauthorized

# Registration form fields.  Property values can be one of the following:
#
# disabled: the field will NOT exist in the form
# optional: the field will be shown but the user does not need to populate it
# required: the field will be shown and the user must populate it with a valid value
#
# Tip: re-ordering the property declarations below will automatically re-order the fields in the view.
#
stormpath.web.register.form.fields.givenName  = optional
stormpath.web.register.form.fields.middleName = disabled
stormpath.web.register.form.fields.surname    = optional
stormpath.web.register.form.fields.username   = disabled
stormpath.web.register.form.fields.email      = required
stormpath.web.register.form.fields.password   = required

# =========== Servlet Request Behavior ========
#
# The next property controls the output of httpServletRequest.getRemoteUser() if the user is authenticated.
#
# The value can be one of: email, username, givenName, href or bypass:
#
# email:     getRemoteUser() will return account.getEmail();
# username:  returns account.getUsername();
# givenName: returns account.getGivenName();
# href:      returns account.getHref();
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
stormpath.servlet.request.remoteUser.strategy = username

# The next property controls the output of httpServletRequest.getUserPrincipal() if the user is authenticated.
#
# The value can be one of: account, email, username, givenName, href or bypass:
#
# account:   returns a com.stormpath.sdk.servlet.http.AccountPrincipal that represents the entire Account object
# email:     returns a com.stormpath.sdk.servlet.http.EmailPrincipal matching account.getEmail()
# username:  returns a com.stormpath.sdk.servlet.http.UsernamePrincipal matching account.getUsername()
# givenName: returns a com.stormpath.sdk.servlet.http.GivenNamePrincipal matching account.getGivenName()
# href:      returns a com.stormpath.sdk.servlet.http.HrefPrincipal matching account.getHref()
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
stormpath.servlet.request.userPrincipal.strategy = account

# The strategies used to determine the user account sending an http request when a strategy cannot be auto-determined.
#
# The value is a comma-delimited list of one or more of: cookie, session, or header:
#
# cookie:  look for a cookie that contains the account's information.  The cookie to check is controlled by the
#          stormpath.web.account.cookie.* properties below.
#
# session: look for the account in the request's associated HTTP session if a session exists (a new session *will not*
#          be created when checking - the check will use request.getSession(false) ).
#
# header:  inspect the http 'Authorization' header using all supported HTTP Authentication Schemes.
#
# The list order determines the order that the specified locations will be checked.  When an account is discovered, any
# further remaining strategies are ignored (skipped).
#
stormpath.web.account.discovery = header, cookie, session

# The storage location that should be used to store the account href after successful authentication.
#
# The value can be *one* of: cookie, session or disabled:
#
# cookie:   Store the account state in a cookie.  The cookie's settings are controlled by the
#           stormpath.web.account.cookie.* properties below.  The same cookie is read later when the
#           stormpath.web.account.discovery property is set to 'cookie' (without the quotes).
#
# session:  Store the account state in the servlet HTTP session.  This option will create a new HTTP session if one
#           does not yet exist.
#
# disabled: Do not store the account state during a request.  This is a good option if your server-side app
#           authenticates every request (for example, a REST API).
#
stormpath.web.account.store = cookie

stormpath.web.account.cookie.name = account
stormpath.web.account.cookie.comment =
stormpath.web.account.cookie.domain =
stormpath.web.account.cookie.maxAge =
# defaults to the web app's context path:
stormpath.web.account.cookie.path =
stormpath.web.account.cookie.secure = true
stormpath.web.account.cookie.httpOnly = true
